# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_neo', [dirname(__file__)])
        except ImportError:
            import _neo
            return _neo
        if fp is not None:
            try:
                _mod = imp.load_module('_neo', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _neo = swig_import_helper()
    del swig_import_helper
else:
    import _neo
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


AT_HANDLE_SYSTEM = _neo.AT_HANDLE_SYSTEM
AT_ERR_NOTINITIALISED = _neo.AT_ERR_NOTINITIALISED
AT_ERR_NOTIMPLEMENTED = _neo.AT_ERR_NOTIMPLEMENTED
AT_ERR_READONLY = _neo.AT_ERR_READONLY
AT_ERR_NOTREADABLE = _neo.AT_ERR_NOTREADABLE
AT_ERR_NOTWRITABLE = _neo.AT_ERR_NOTWRITABLE
AT_ERR_OUTOFRANGE = _neo.AT_ERR_OUTOFRANGE
AT_ERR_INDEXNOTAVAILABLE = _neo.AT_ERR_INDEXNOTAVAILABLE
AT_ERR_INDEXNOTIMPLEMENTED = _neo.AT_ERR_INDEXNOTIMPLEMENTED
AT_ERR_EXCEEDEDMAXSTRINGLENGTH = _neo.AT_ERR_EXCEEDEDMAXSTRINGLENGTH
AT_ERR_CONNECTION = _neo.AT_ERR_CONNECTION
AT_ERR_NODATA = _neo.AT_ERR_NODATA
AT_ERR_INVALIDHANDLE = _neo.AT_ERR_INVALIDHANDLE
AT_ERR_TIMEDOUT = _neo.AT_ERR_TIMEDOUT
AT_ERR_BUFFERFULL = _neo.AT_ERR_BUFFERFULL
AT_ERR_INVALIDSIZE = _neo.AT_ERR_INVALIDSIZE
AT_ERR_INVALIDALIGNMENT = _neo.AT_ERR_INVALIDALIGNMENT
AT_ERR_COMM = _neo.AT_ERR_COMM
AT_ERR_STRINGNOTAVAILABLE = _neo.AT_ERR_STRINGNOTAVAILABLE
AT_ERR_STRINGNOTIMPLEMENTED = _neo.AT_ERR_STRINGNOTIMPLEMENTED
AT_ERR_NULL_FEATURE = _neo.AT_ERR_NULL_FEATURE
AT_ERR_NULL_HANDLE = _neo.AT_ERR_NULL_HANDLE
AT_ERR_NULL_IMPLEMENTED_VAR = _neo.AT_ERR_NULL_IMPLEMENTED_VAR
AT_ERR_NULL_READABLE_VAR = _neo.AT_ERR_NULL_READABLE_VAR
AT_ERR_NULL_READONLY_VAR = _neo.AT_ERR_NULL_READONLY_VAR
AT_ERR_NULL_WRITABLE_VAR = _neo.AT_ERR_NULL_WRITABLE_VAR
AT_ERR_NULL_MINVALUE = _neo.AT_ERR_NULL_MINVALUE
AT_ERR_NULL_MAXVALUE = _neo.AT_ERR_NULL_MAXVALUE
AT_ERR_NULL_VALUE = _neo.AT_ERR_NULL_VALUE
AT_ERR_NULL_STRING = _neo.AT_ERR_NULL_STRING
AT_ERR_NULL_COUNT_VAR = _neo.AT_ERR_NULL_COUNT_VAR
AT_ERR_NULL_ISAVAILABLE_VAR = _neo.AT_ERR_NULL_ISAVAILABLE_VAR
AT_ERR_NULL_MAXSTRINGLENGTH = _neo.AT_ERR_NULL_MAXSTRINGLENGTH
AT_ERR_NULL_EVCALLBACK = _neo.AT_ERR_NULL_EVCALLBACK
AT_ERR_NULL_QUEUE_PTR = _neo.AT_ERR_NULL_QUEUE_PTR
AT_ERR_NULL_WAIT_PTR = _neo.AT_ERR_NULL_WAIT_PTR
AT_ERR_NULL_PTRSIZE = _neo.AT_ERR_NULL_PTRSIZE
AT_ERR_NOMEMORY = _neo.AT_ERR_NOMEMORY
AT_ERR_HARDWARE_OVERFLOW = _neo.AT_ERR_HARDWARE_OVERFLOW

def AT_InitialiseLibrary():
  return _neo.AT_InitialiseLibrary()
AT_InitialiseLibrary = _neo.AT_InitialiseLibrary

def AT_FinaliseLibrary():
  return _neo.AT_FinaliseLibrary()
AT_FinaliseLibrary = _neo.AT_FinaliseLibrary

def AT_Open(*args):
  return _neo.AT_Open(*args)
AT_Open = _neo.AT_Open

def AT_Close(*args):
  return _neo.AT_Close(*args)
AT_Close = _neo.AT_Close

def AT_IsImplemented(*args):
  return _neo.AT_IsImplemented(*args)
AT_IsImplemented = _neo.AT_IsImplemented

def AT_IsReadOnly(*args):
  return _neo.AT_IsReadOnly(*args)
AT_IsReadOnly = _neo.AT_IsReadOnly

def AT_IsReadable(*args):
  return _neo.AT_IsReadable(*args)
AT_IsReadable = _neo.AT_IsReadable

def AT_IsWritable(*args):
  return _neo.AT_IsWritable(*args)
AT_IsWritable = _neo.AT_IsWritable

def AT_SetInt(*args):
  return _neo.AT_SetInt(*args)
AT_SetInt = _neo.AT_SetInt

def AT_GetInt(*args):
  return _neo.AT_GetInt(*args)
AT_GetInt = _neo.AT_GetInt

def AT_GetIntMax(*args):
  return _neo.AT_GetIntMax(*args)
AT_GetIntMax = _neo.AT_GetIntMax

def AT_GetIntMin(*args):
  return _neo.AT_GetIntMin(*args)
AT_GetIntMin = _neo.AT_GetIntMin

def AT_SetFloat(*args):
  return _neo.AT_SetFloat(*args)
AT_SetFloat = _neo.AT_SetFloat

def AT_GetFloat(*args):
  return _neo.AT_GetFloat(*args)
AT_GetFloat = _neo.AT_GetFloat

def AT_GetFloatMax(*args):
  return _neo.AT_GetFloatMax(*args)
AT_GetFloatMax = _neo.AT_GetFloatMax

def AT_GetFloatMin(*args):
  return _neo.AT_GetFloatMin(*args)
AT_GetFloatMin = _neo.AT_GetFloatMin

def AT_SetBool(*args):
  return _neo.AT_SetBool(*args)
AT_SetBool = _neo.AT_SetBool

def AT_GetBool(*args):
  return _neo.AT_GetBool(*args)
AT_GetBool = _neo.AT_GetBool

def AT_SetEnumIndex(*args):
  return _neo.AT_SetEnumIndex(*args)
AT_SetEnumIndex = _neo.AT_SetEnumIndex

def AT_SetEnumString(*args):
  return _neo.AT_SetEnumString(*args)
AT_SetEnumString = _neo.AT_SetEnumString

def AT_GetEnumIndex(*args):
  return _neo.AT_GetEnumIndex(*args)
AT_GetEnumIndex = _neo.AT_GetEnumIndex

def AT_GetEnumCount(*args):
  return _neo.AT_GetEnumCount(*args)
AT_GetEnumCount = _neo.AT_GetEnumCount

def AT_IsEnumIndexAvailable(*args):
  return _neo.AT_IsEnumIndexAvailable(*args)
AT_IsEnumIndexAvailable = _neo.AT_IsEnumIndexAvailable

def AT_IsEnumIndexImplemented(*args):
  return _neo.AT_IsEnumIndexImplemented(*args)
AT_IsEnumIndexImplemented = _neo.AT_IsEnumIndexImplemented

def AT_GetEnumStringByIndex(*args):
  return _neo.AT_GetEnumStringByIndex(*args)
AT_GetEnumStringByIndex = _neo.AT_GetEnumStringByIndex

def AT_Command(*args):
  return _neo.AT_Command(*args)
AT_Command = _neo.AT_Command

def AT_SetString(*args):
  return _neo.AT_SetString(*args)
AT_SetString = _neo.AT_SetString

def AT_GetString(*args):
  return _neo.AT_GetString(*args)
AT_GetString = _neo.AT_GetString

def AT_GetStringMaxLength(*args):
  return _neo.AT_GetStringMaxLength(*args)
AT_GetStringMaxLength = _neo.AT_GetStringMaxLength

def AT_QueueBuffer(*args):
  return _neo.AT_QueueBuffer(*args)
AT_QueueBuffer = _neo.AT_QueueBuffer

def AT_WaitBuffer(*args):
  return _neo.AT_WaitBuffer(*args)
AT_WaitBuffer = _neo.AT_WaitBuffer

def AT_Flush(*args):
  return _neo.AT_Flush(*args)
AT_Flush = _neo.AT_Flush
# This file is compatible with both classic and new-style classes.


